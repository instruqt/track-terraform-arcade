id: gn55kw4m6g
type: track
version: 0.0.1
slug: terraform-arcade
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/terraform.png
title: Terraform arcade
teaser: Do you know Terraform in and out?
description: |-
  Do you know Terraform in and out?

  This track is part of the HashiDays Amsterdam 2018 Instruqt Arcade Challenge. Play the track on our Arcade machine, or try your luck here.
tags:
- HashiCorp
- Terraform
- arcade
challenges:
- id: d8eea5l66d
  slug: initialization
  title: Initialization
  teaser: Initialization
  notes:
  - type: text
    contents: |-
      Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently.

      It can manage existing and popular (cloud) service providers as well as custom in-house solutions.
  - type: text
    contents: |-
      Terraform has a declarative model to describe what resources should be created.

      These resources are defined in one or more configuration files, effectively enabling [Infrastructure as Code](https://www.terraform.io/intro/index.html#infrastructure-as-code).
  - type: text
    contents: |-
      Before Terraform can manage infrastructure, the workspace needs to be initialized.

      The terraform init command is used to initialize a working directory containing Terraform configuration files.

      This is the first command that should be run after writing a new Terraform configuration or cloning an existing one from version control.
  difficulty: basic
  assignment: Initialize terraform in your home folder
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: terraform
- id: v344q8azjd
  slug: planning-ahead
  title: Planning ahead
  teaser: Planning ahead
  notes:
  - type: text
    contents: |-
      Based on the desired state specified in the configuration files, and the current state of your infrastructure, Terraform can determine the necessary actions to achieve that state.

      The terraform [plan command](https://www.terraform.io/docs/commands/plan.html) is used to show these actions and record them in an execution plan. No changes will be made to your infrastructure yet.
  difficulty: basic
  assignment: Create a plan based on the terraform configuration files in your home
    folder, and have terraform write the plan to *plan.out* in your home directory.
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: terraform
- id: wxqqp4239d
  slug: apply
  title: Creating infrastructure
  teaser: Initialize and apply
  notes:
  - type: text
    contents: |-
      The terraform [apply command](https://www.terraform.io/docs/commands/apply.html) is used to apply the changes required to reach the desired state.

      It can either directly apply the configuration files, or the pre-determined set of actions generated by a terraform plan execution plan.
  difficulty: basic
  assignment: Apply the changes that you've saved in the *plan.out* file.
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: terraform
- id: veeez89jqv
  slug: adding-resources
  title: Add another resource
  teaser: Add another resource
  notes:
  - type: text
    contents: |-
      The most important thing you'll configure with Terraform are [resources](https://www.terraform.io/docs/configuration/resources.html).

      Every resource in the terraform configuration represents a component of your infrastructure.
  - type: text
    contents: |-
      A resource configuration block looks like the following:

      ```
      resource "consul_node" "arcade" {
        address = "192.168.10.10"
        name    = "arcade"
      }
      ```
  difficulty: basic
  assignment: Create a *postgresql_role* that enables you to login with name *arcade*
    and password *highscore*.
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: terraform
- id: wbllae98bv
  slug: workspace
  title: Switching workspaces
  teaser: Create a workspaces with its own state
  notes:
  - type: text
    contents: |-
      When terraform creates infrastructure, it stores the properties of those components in its state.

      The state is saved in a [workspace](https://www.terraform.io/docs/commands/workspace/index.html). By default, terraform will store its state in a workspace called *default*.
  - type: text
    contents: |-
      Terraform allows you to create multiple workspaces.

      This enables you to create different and independent states, based on the same configuration.

      For instance for a staging and production environment, or for your feature branches.
  difficulty: basic
  assignment: |-
    We are currently working in the default workspace, but are ready to go to prod.

    Create a prod workspace and switch to it.
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: terraform
- id: vzoore7n4d
  slug: import
  title: Importing resources
  teaser: Import existing resources
  notes:
  - type: text
    contents: |-
      Terraform is able to [import](https://www.terraform.io/docs/import/index.html) existing infrastructure.

      This allows you take resources you've created by some other means and bring it under Terraform management.
  - type: text
    contents: |-
      Importing is done using the [import](https://www.terraform.io/docs/commands/import.html) command.

      To import a resource, specify its terraform address (typically a resource type and name) and the ID for that specific resource.

      Note that importing a resources only imports it into the state. It will not generate the corresponding configuration files.
  difficulty: basic
  assignment: |-
    There is an additional database named *backup* in the PostgreSQL instance.
    Import it into the state as *backup*.
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: terraform
- id: w9nn4lbxkd
  slug: taint
  title: Tainting resources
  teaser: Mark existing resources for destruction
  notes:
  - type: text
    contents: |-
      The terraform [taint](https://www.terraform.io/docs/commands/taint.html) command manually marks a Terraform-managed resource as tainted, forcing it to be destroyed and recreated on the next apply.

      It will not modify infrastructure directly, but will only modify the terraform state file.
  - type: text
    contents: https://www.terraform.io/docs/commands/taint.html
  difficulty: basic
  assignment: We need a new certificate, mark the resource as tained, so it will be
    marked for recreation.
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: terraform
- id: wyooq36e8d
  slug: state
  title: Manipulating state
  teaser: Manipulate the state
  notes:
  - type: text
    contents: |-
      The terraform [state](https://www.terraform.io/docs/commands/state/index.html) command is used for advanced state management.

      It can move, rename or remove resources from a state file. And it can be used to list all resources, or show details of a specific resource.
  difficulty: basic
  assignment: |-
    Rename the resource named *certificate* to *self-signed*.

    Then make sure this *move* is reflected in the state.
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: terraform
- id: vo99zqn3zv
  slug: validate
  title: Validating code
  teaser: Validate terraform code
  notes:
  - type: text
    contents: |-
      The terraform [validate](https://www.terraform.io/docs/commands/validate.html) command is used to validate the syntax of the terraform files.

      It will check for many syntax problems, like invalid HCL syntax or references, duplicate configurations and invalid interpolations.
  difficulty: basic
  assignment: |-
    The code changes don't validate and can't be applied.

    Find the problems and fix them so they pass validation.
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: terraform
developers:
- ade@instruqt.com
- erik@instruqt.com
published: false
